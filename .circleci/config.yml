version: 2
jobs:
  build:
    docker:
      - image: docker:17.03-git
    environment:
      DSD_DOCKER_REGISTRY: "registry.service.dsd.io"
      DSD_DOCKER_IMAGE: "cla_backend"
      ECR_DOCKER_REGISTRY: "926803513772.dkr.ecr.eu-west-1.amazonaws.com"
      ECR_DOCKER_IMAGE: "laa-get-access/laa-cla-backend"
    steps:
      - checkout
      - setup_remote_docker:
          version: 17.03.0-ce
          docker_layer_caching: true
      - run:
          name: Login to the DSD Docker registry
          command: |
            docker login \
              --username $DOCKER_USERNAME \
              --password $DOCKER_PASSWORD \
              --email "${DOCKER_USERNAME}@digital.justice.gov.uk" \
              $DSD_DOCKER_REGISTRY
      - run:
          name: Login to the ECR Docker registry
          command: |
            apk add --no-cache --no-progress py2-pip
            pip install awscli
            ecr_login="$(aws ecr get-login --region eu-west-1 --no-include-email)"
            ${ecr_login}
      - run:
          name: Build Docker image
          command: |
            docker build --tag application:$CIRCLE_SHA1 \
              --label build.git.sha=$CIRCLE_SHA1 \
              --label build.git.branch=$CIRCLE_BRANCH \
              --label build.url=$CIRCLE_BUILD_URL \
              .
      - run:
          name: Validate Python version
          command: |
            docker run --rm --tty --interactive application:$CIRCLE_SHA1 python --version | grep "2.7"
      - run:
          name: Tag and push Docker images
          command: .circleci/tag_and_push_docker_image application:$CIRCLE_SHA1
  lint:
    docker:
      - image: circleci/python:3.7
    steps:
      - checkout
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv lint-env
      - restore_cache:
          keys:
            - pip-v1-{{ checksum "requirements/lint.txt" }}
      - run:
          name: Install dependencies
          command: |
            source lint-env/bin/activate
            pip install --requirement requirements/lint.txt
      - save_cache:
          key: pip-v1-{{ checksum "requirements/lint.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Lint with flake8 (warnings only)
          command: |
            source lint-env/bin/activate
            flake8 --exit-zero cla_backend
      - run:
          name: Check formatting with Black
          command: |
            source lint-env/bin/activate
            black --check cla_backend
  test:
    docker:
      - image: circleci/python:2.7
        environment:
          DB_NAME: circle_test
          DB_USER: root
          DJANGO_SETTINGS_MODULE: cla_backend.settings.circle
      - image: circleci/postgres:9.4-alpine
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - run: sudo apt-get install postgresql-client-9.6
      - run:
          name: Setup Postgres
          command: |
            dockerize -wait tcp://localhost:5432 -timeout 1m
            psql -d postgresql://$DB_USER@localhost/$DB_NAME -c "create extension pgcrypto;"
            psql -d postgresql://$DB_USER@localhost/template1 -c 'create extension pgcrypto;'
      - run:
          name: Setup Python environment
          command: |
            pip install virtualenv
            virtualenv env
            source env/bin/activate
            pip install pip==18.1
      - restore_cache:
          keys:
            - pip-v2-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}
      - run:
          name: Install dependencies
          command: |
            source env/bin/activate
            pip install --requirement requirements.txt --requirement requirements/testing.txt
            pip check
      - save_cache:
          key: pip-v2-{{ checksum "requirements/base.txt" }}-{{ checksum "requirements/testing.txt" }}
          paths:
            - "~/.cache/pip"
      - run:
          name: Run unit tests
          command: |
            source env/bin/activate
            python manage.py test --verbosity=2

workflows:
  version: 2
  build_and_test:
    jobs:
      - lint
      - test
      - build
